# -*- coding: utf-8 -*-
"""LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YZ_YaMKjLyojwbi9SylEEWs-OalaXY7S

# **LSTM (Long Short Term Memory)**
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Embedding, Dense
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

corpus = ["The quick brown fox jumps over lazy dog.",
          "A journey of a thousand miles begin with a single step.",
          "To be or not to be, that is the question.",
          "All the gliters is not gold."
          ]

tk = Tokenizer()
tk.fit_on_texts(corpus)
total_words = len(tk.word_index) + 1
input_sequences = []

for line in corpus:
  token_list = tk.texts_to_sequences([line])[0]
  for i in range(1, len(token_list)):
    n_gram_sequence = token_list[:i+1]
    input_sequences.append(n_gram_sequence)

max_sequence_length = max([len(seq) for seq in input_sequences])
input_sequences = pad_sequences(input_sequences, maxlen=max_sequence_length, padding='pre')
x, y = input_sequences[:,:-1], input_sequences[:, -1]
y = tf.keras.utils.to_categorical(y, num_classes=total_words)

model = Sequential()
model.add(Embedding(total_words, 50, input_length=max_sequence_length-1))
model.add(LSTM(100, return_sequences=True))
model.add(LSTM(100))
model.add(Dense(total_words, activation='softmax'))
model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(x, y, epochs=500, verbose=1)
seed_text = "the quick"
next_words = 10
for _ in range(next_words):
  token_list = tk.texts_to_sequences([seed_text])[0]
  token_list = pad_sequences([token_list], maxlen=max_sequence_length-1, padding='pre')
  predicted = np.argmax(model.predict(token_list), axis=-1)
  output_word = " "
  for word, index in tk.word_index.items():
    if index == predicted:
      output_word = word
      break
  seed_text += " " + output_word

print(seed_text)